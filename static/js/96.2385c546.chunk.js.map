{"version":3,"file":"static/js/96.2385c546.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","../node_modules/redux-form/es/Form.js","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__yBMnf\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => any\r\n}\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\nuseEffect(()=>{\r\n    setStatus(props.status)\r\n},[props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode ?\r\n                <div>\r\n                    <input onChange={onStatusChange} value={status} autoFocus={true} onBlur={deactivateEditMode}/>\r\n                </div>\r\n                : <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => any\r\n}\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    return (\r\n        <div>\r\n            {\r\n                !props.profile ? <Preloader/> : <div>\r\n                    <div>\r\n                        <img\r\n                            src={\"https://wonder-day.com/wp-content/uploads/2020/04/wonder-day-images-rainbow-37-1024x576.jpg\"}/>\r\n                    </div>\r\n                    <div className={s.descriptionBlock}>\r\n                        <img src={props.profile.photos.large}/>\r\n                        <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                        <div>Full name: {props.profile.fullName}</div>\r\n                        <div>contacts:{props.profile.contacts.github}</div>\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__P5+78\",\"posts\":\"MyPosts_posts__v9TvF\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__RQ6m6\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType={\r\n    message:string\r\n    likesCount:string\r\n}\r\n\r\nconst Post = (props:PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcShwIXO7TuAocUZF1Jq5mJuRs78wGsf3Qe5-w&usqp=CAU\"/>\r\n            {props.message}\r\n\r\n            <div>\r\n                <span>likes</span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withReduxForm } from './ReduxFormContext';\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    if (!props._reduxForm) {\n      throw new Error('Form must be inside a component decorated with reduxForm()');\n    }\n\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onSubmit !== prevProps.onSubmit) {\n      this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _reduxForm = _this$props._reduxForm,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"_reduxForm\"]);\n\n    return /*#__PURE__*/React.createElement(\"form\", rest);\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  _reduxForm: PropTypes.object\n};\nexport default withReduxForm(Form);","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {Field, Form, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPost: string) => void\r\n}\r\nconst maxLength10 = maxLengthCreator(20)\r\n\r\nconst MyPosts=React.memo((props: MyPostsPropsType)=> {\r\n    console.log(\"render\")\r\n    let postMessageRef = React.createRef<HTMLTextAreaElement>()\r\n    const onAddPost = (value: string | any) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostsReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {[...props.posts]\r\n                    .reverse()\r\n                    .map((p, index) => <Post message={p.message} likesCount={p.likesCount}\r\n                                                     key={index}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddNewPostsForm = (props: any) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" component={TextArea} validate={[required, maxLength10]}\r\n                       placeholder=\"post massage\"/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\nconst AddNewPostsReduxForm = reduxForm({form: \"ProfileAddNewPostsForm\"})(AddNewPostsForm)\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"../MyPosts\";\r\nimport {addPostAC, PostType} from \"../../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    // newPostText: string\r\n}\r\nlet MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet MapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPost:string) => {\r\n            dispatch(addPostAC(newPost))\r\n        }\r\n    }\r\n}\r\nconst SuperMyPostContainer = connect(MapStateToProps, MapDispatchToProps)(MyPosts)\r\n\r\nexport default SuperMyPostContainer;","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport SuperMyPostContainer from \"./MyPosts/Post/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\nexport type ProfilepropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => any\r\n\r\n}\r\n\r\nconst Profile = (props: ProfilepropsType) => {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n            />\r\n            <SuperMyPostContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {GetStatusTC, ProfileGetTC, ProfileType, UpdateStatusTC} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    autorazedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    ProfileGetTC: (id: number) => any\r\n    GetStatusTC: (id: number) => any\r\n    UpdateStatusTC: (status: string) => any\r\n}\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n    componentDidMount() {\r\n        let userId = Number(this.props.match.params.userId)\r\n\r\n        if (!userId) {\r\n            userId =Number(this.props.autorazedUserId)\r\n           if(!userId){\r\n               this.props.history.push(\"/login\")\r\n           }\r\n\r\n        }\r\n        this.props.ProfileGetTC(userId)\r\n        this.props.GetStatusTC(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={s.content}>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.UpdateStatusTC}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorazedUserId: state.auth.userID,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {ProfileGetTC, GetStatusTC, UpdateStatusTC}),\r\n    WithAuthRedirect,\r\n    withRouter)(ProfileContainer)\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nexport type MapStateToPropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsTypeForRedirect => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport function WithAuthRedirect <T>(Component: ComponentType<T>)  {\r\n    const RedirectComponent = (props: MapStateToPropsTypeForRedirect) => {\r\n        let{isAuth, ...restProps}=props\r\n        if (!isAuth) return <Redirect to={'/Login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","profile","src","className","s","photos","large","fullName","contacts","github","Preloader","message","likesCount","Form","_Component","_this","call","this","_reduxForm","Error","_inheritsLoose","_proto","prototype","componentDidMount","registerInnerOnSubmit","onSubmit","componentDidUpdate","prevProps","render","_this$props","rest","_objectWithoutPropertiesLoose","React","Component","propTypes","PropTypes","withReduxForm","maxLength10","maxLengthCreator","MyPosts","console","log","AddNewPostsReduxForm","addPost","newPostText","posts","reverse","map","p","index","reduxForm","form","handleSubmit","Field","name","component","TextArea","validate","required","placeholder","connect","state","profilePage","dispatch","newPost","addPostAC","ProfileContainer","userId","Number","match","params","autorazedUserId","history","push","ProfileGetTC","GetStatusTC","UpdateStatusTC","compose","auth","userID","isAuth","WithAuthRedirect","withRouter","mapStateToPropsForRedirect","restProps","to"],"sourceRoot":""}