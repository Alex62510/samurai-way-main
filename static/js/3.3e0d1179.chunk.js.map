{"version":3,"file":"static/js/3.3e0d1179.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0B,mBCiB7K,EATmB,SAACA,GAEhB,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCExD,EANgB,SAACL,GACb,OACI,iBAAKC,UAAWC,EAAhB,cAA4BF,EAAMM,mB,uCC6BpCC,GAAYC,EAAAA,EAAAA,GAAiB,IAa7BC,GAAoBC,EAAAA,EAAAA,GAAU,CAACC,KAAK,wBAAhBD,EAZH,SAACV,GACpB,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAUX,KAAK,iBAAiBY,SAAU,CAACC,EAAAA,EAASX,GAAcY,YAAY,0BAEpG,0BACI,6CAMhB,EArCgB,SAACnB,GACb,IAAMoB,EAAiBpB,EAAMqB,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAE,EAAF,CAAalB,KAAMkB,EAAElB,KAAMD,GAAImB,EAAEnB,IAASmB,EAAEnB,OACpFoB,EAAkBxB,EAAMyB,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASpB,eAAgBoB,EAAEC,SAAcD,EAAEtB,OAK3F,OACI,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKkB,KAEL,iBAAKnB,UAAWC,EAAhB,WACI,yBAAMsB,KACN,SAACf,EAAD,CACIG,SAXI,SAAEgB,GAClB5B,EAAM6B,YAAYD,EAAOE,0B,8BCQjC,GAAeC,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAbtB,SAACC,GACnB,MAAO,CACHZ,QAASY,EAAMC,YAAYb,QAC3BI,SAAUQ,EAAMC,YAAYT,aAGX,SAACU,GACtB,MAAO,CAEHN,YAAa,SAACO,GAAD,OAAkBD,GAASE,EAAAA,EAAAA,GAAmBD,SAIsBE,EAAAA,EAAzF,CAA2GC,I,iICrBrGC,EAA6B,SAACP,GAChC,MAAO,CACHQ,OAAQR,EAAMS,KAAKD,SAGpB,SAASH,EAAqBK,GAQjC,OADiCX,EAAAA,EAAAA,IAAQQ,EAARR,EANP,SAAChC,GACvB,IAAIyC,EAAsBzC,EAAtByC,OAAWG,GAAf,OAA0B5C,EAA1B,GACA,OAAKyC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUzC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__TiY-k\",\"dialogsItems\":\"Dialogs_dialogsItems__fN25C\",\"active\":\"Dialogs_active__k7JZO\",\"dialog\":\"Dialogs_dialog__YtOyP\",\"messages\":\"Dialogs_messages__HKiZb\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\nexport type MessagePropsType ={\r\n    messageElement:string\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.dialog}> {props.messageElement}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsType, MessagesType} from \"../../redux/message-reducer\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type DialogsPropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMassageBody: string\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (value:string) => void\r\n    isAuth: boolean\r\n}\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    const dialogsElement = props.dialogs.map(d => < DialogItem name={d.name} id={d.id} key={d.id}/>)\r\n    const messagesElement = props.messages.map(m => <Message messageElement={m.message} key={m.id}/>)\r\n\r\n    const addNewMessage=( values:string|any)=>{\r\n        props.sendMessage(values.newMassageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <AddMessageFormRedux\r\n                    onSubmit={addNewMessage}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\ntype AddMessageFormType={handleSubmit:React.FormEventHandler<HTMLFormElement> | undefined}\r\n\r\nconst maxLength50=maxLengthCreator(50)\r\nconst AddMassageForm = (props:AddMessageFormType ) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name=\"newMassageBody\" validate={[required,maxLength50]} placeholder=\"Enter your massage\"/>\r\n               </div>\r\n            <div>\r\n                <button >send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux=reduxForm({form:\"dialogAddMassageForm\"})(AddMassageForm)\r\nexport default Dialogs;","import React from 'react';\r\nimport {\r\n    DialogsType,\r\n    MessagesType,\r\n    sendMessageCreater,\r\n\r\n} from \"../../redux/message-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\nlet MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogs: state.messagePage.dialogs,\r\n        messages: state.messagePage.messages,\r\n    }\r\n}\r\nlet MapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n\r\n        sendMessage: (value:string) => dispatch(sendMessageCreater(value))\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(MapStateToProps, MapDispatchToProps),WithAuthRedirect)(Dialogs);","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nexport type MapStateToPropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsTypeForRedirect => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport function WithAuthRedirect <T>(Component: ComponentType<T>)  {\r\n    const RedirectComponent = (props: MapStateToPropsTypeForRedirect) => {\r\n        let{isAuth, ...restProps}=props\r\n        if (!isAuth) return <Redirect to={'/Login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n"],"names":["props","className","s","to","id","name","messageElement","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","dialogsElement","dialogs","map","d","messagesElement","messages","m","message","values","sendMessage","newMassageBody","compose","connect","state","messagePage","dispatch","value","sendMessageCreater","WithAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}