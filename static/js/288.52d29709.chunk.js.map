{"version":3,"file":"static/js/288.52d29709.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataEditForm.tsx","components/Profile/ProfileInfo/UserContacts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","../node_modules/redux-form/es/Form.js","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__yBMnf\",\"avatarPhoto\":\"ProfileInfo_avatarPhoto__aylis\",\"contact\":\"ProfileInfo_contact__Y-JMG\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => any\r\n}\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\nuseEffect(()=>{\r\n    setStatus(props.status)\r\n},[props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode ?\r\n                <div>\r\n                    <input onChange={onStatusChange} value={status} autoFocus={true} onBlur={deactivateEditMode}/>\r\n                </div>\r\n                : <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n","import React, {FC} from \"react\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\ntype ProfileDataEditFormProps = {\r\n    profile: ProfileType\r\n    saveProfile: any\r\n    setEditMode: any\r\n}\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n\r\n}\r\n\r\nexport const ProfileDataEditForm: FC<ProfileDataEditFormProps> = ({profile, saveProfile, setEditMode}) => {\r\n    const onSubmit = (formData: any) => {\r\n        saveProfile(formData).then(()=>{\r\n            setEditMode(false)\r\n        })\r\n        console.log(formData)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileEditForm profile={profile} onSubmit={onSubmit} initialValues={profile}/>\r\n\r\n        </div>\r\n    )\r\n}\r\ntype HandleSubmitProps = {\r\n    handleSubmit: React.FormEventHandler<HTMLFormElement> | undefined\r\n    profile: ProfileType\r\n}\r\n\r\n\r\nconst ProfileEdit: FC<HandleSubmitProps & InjectedFormProps> = ({handleSubmit, profile, error}) => {\r\n    const contactTitle = profile.contacts && Object.entries(profile.contacts)\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button onClick={() => {\r\n                }}>save\r\n                </button>\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name: </b>{\r\n                <Field component={Input} name=\"fullName\" placeholder=\"fullName\"/>}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>{\r\n                <Field component={Input} name=\"LookingForAJob\" placeholder=\"Look job\" type={'checkbox'}/>}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills: </b>{\r\n                <Field component={TextArea} name=\"lookingForAJobDescription\"\r\n                       placeholder=\"Looking for a job description\"/>}\r\n            </div>\r\n            <div>\r\n                <b>About me: </b>{\r\n                <Field component={TextArea} name=\"aboutMe\" placeholder=\"AboutMe\"/>}\r\n            </div>\r\n            <b> Contacts: </b>{<div>\r\n            <b>{contactTitle?.map((title, index) => <div key={index}>\r\n                <div className={s.contact}>{`${title[0]}:`}</div>\r\n                <Field component={Input} name={'contacts.' + title[0]} placeholder={title[0]}/>\r\n            </div>)}\r\n            </b>\r\n        </div>}\r\n        </form>\r\n    )\r\n}\r\nconst ProfileEditForm = reduxForm<any, any>({form: 'ProfileEdit'})(ProfileEdit)","import {ContactsType} from \"../../../redux/profile-reducer\";\r\nimport React, {FC} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\ntype ContactProps = {\r\n    contacts?: ContactsType\r\n\r\n}\r\nexport const UserContacts: FC<ContactProps> = ({contacts }) => {\r\n    const contactTitle = contacts && Object.entries(contacts)\r\n    return <div>\r\n        {contactTitle?.map((title, index) => <div key={index}>\r\n            <div className={s.contact} >{`${title[0]}: ${title[1] ? title[1] :''}`}</div>\r\n        </div>)}\r\n    </div>\r\n}","import React, {ChangeEvent, FC, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/free-user.png\";\r\nimport {ProfileDataEditForm} from \"./ProfileDataEditForm\";\r\nimport {UserContacts} from \"./UserContacts\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => any\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    saveProfile:any\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    const [editMode,setEditMode]=useState<boolean>(false)\r\n\r\n    const changeData =()=>{\r\n        setEditMode(true)\r\n    }\r\n    const mainPhotoSelectOn = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                !props.profile ? <Preloader/> : <div>\r\n                    <div>\r\n                        <img\r\n                            src={\"https://wonder-day.com/wp-content/uploads/2020/04/wonder-day-images-rainbow-37-1024x576.jpg\"}/>\r\n                    </div>\r\n                    <div className={s.descriptionBlock}>\r\n                        <img src={props.profile.photos.large || userPhoto} className={s.avatarPhoto}/>\r\n                        {props.isOwner && <input type={\"file\"} onChange={mainPhotoSelectOn}/>}\r\n                        <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                        {editMode ?\r\n                            <ProfileDataEditForm setEditMode={setEditMode} profile={props.profile} saveProfile={props.saveProfile}/> :\r\n                            <ProfileData profile={props.profile} isOwner={props.isOwner} changeData={changeData}/> }\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    changeData:()=>void\r\n}\r\nconst ProfileData: FC<ProfileDataProps> = ({profile,isOwner,changeData}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div> <button onClick={changeData}>EditData</button></div>}\r\n            <div>\r\n                <b> Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>{profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div>\r\n                <b>Professionals skills: </b>{profile.lookingForAJobDescription}\r\n            </div>\r\n            <div>\r\n                <b> About me: </b> {profile.aboutMe}\r\n            </div>\r\n            <b> Contacts: </b> <UserContacts contacts={profile.contacts}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__P5+78\",\"posts\":\"MyPosts_posts__v9TvF\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__RQ6m6\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType={\r\n    message:string\r\n    likesCount:string\r\n}\r\n\r\nconst Post = (props:PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcShwIXO7TuAocUZF1Jq5mJuRs78wGsf3Qe5-w&usqp=CAU\"/>\r\n            {props.message}\r\n\r\n            <div>\r\n                <span>likes</span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withReduxForm } from './ReduxFormContext';\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    if (!props._reduxForm) {\n      throw new Error('Form must be inside a component decorated with reduxForm()');\n    }\n\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onSubmit !== prevProps.onSubmit) {\n      this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _reduxForm = _this$props._reduxForm,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"_reduxForm\"]);\n\n    return /*#__PURE__*/React.createElement(\"form\", rest);\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  _reduxForm: PropTypes.object\n};\nexport default withReduxForm(Form);","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {Field, Form, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPost: string) => void\r\n}\r\nconst maxLength10 = maxLengthCreator(20)\r\n\r\nconst MyPosts=React.memo((props: MyPostsPropsType)=> {\r\n    console.log(\"render\")\r\n    let postMessageRef = React.createRef<HTMLTextAreaElement>()\r\n    const onAddPost = (value: string | any) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostsReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {[...props.posts]\r\n                    .reverse()\r\n                    .map((p, index) => <Post message={p.message} likesCount={p.likesCount}\r\n                                                     key={index}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddNewPostsForm = (props: any) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" component={TextArea} validate={[required, maxLength10]}\r\n                       placeholder=\"post massage\"/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\nconst AddNewPostsReduxForm = reduxForm({form: \"ProfileAddNewPostsForm\"})(AddNewPostsForm)\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"../MyPosts\";\r\nimport {addPostAC, PostType} from \"../../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    // newPostText: string\r\n}\r\nlet MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet MapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPost:string) => {\r\n            dispatch(addPostAC(newPost))\r\n        }\r\n    }\r\n}\r\nconst SuperMyPostContainer = connect(MapStateToProps, MapDispatchToProps)(MyPosts)\r\n\r\nexport default SuperMyPostContainer;","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport SuperMyPostContainer from \"./MyPosts/Post/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\nexport type ProfilepropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => any\r\n    isOwner: boolean\r\n    savePhoto:(file:any)=>any\r\n    saveProfile:any\r\n}\r\n\r\nconst Profile = (props: ProfilepropsType) => {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <SuperMyPostContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    GetStatusTC,\r\n    ProfileGetTC,\r\n    ProfileType,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    UpdateStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    autorazedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    ProfileGetTC: (id: number) => any\r\n    GetStatusTC: (id: number) => any\r\n    UpdateStatusTC: (status: string) => any\r\n    savePhotoTC:(file:any)=>any\r\n    saveProfileTC:(value:any)=>any\r\n}\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n    refreshProfile(){\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId =Number(this.props.autorazedUserId)\r\n            if(!userId){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.ProfileGetTC(userId)\r\n        this.props.GetStatusTC(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n       if(this.props.match.params.userId!==prevProps.match.params.userId){\r\n           this.refreshProfile()\r\n       }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className={s.content}>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.UpdateStatusTC}\r\n                    savePhoto={this.props.savePhotoTC}\r\n                    saveProfile={this.props.saveProfileTC}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorazedUserId: state.auth.userID,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {ProfileGetTC, GetStatusTC, UpdateStatusTC,savePhotoTC,saveProfileTC}),\r\n    WithAuthRedirect,\r\n    withRouter)(ProfileContainer)\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nexport type MapStateToPropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsTypeForRedirect => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport function WithAuthRedirect <T>(Component: ComponentType<T>)  {\r\n    const RedirectComponent = (props: MapStateToPropsTypeForRedirect) => {\r\n        let{isAuth, ...restProps}=props\r\n        if (!isAuth) return <Redirect to={'/Login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileDataEditForm","profile","saveProfile","ProfileEditForm","onSubmit","formData","then","console","log","initialValues","reduxForm","form","handleSubmit","error","contactTitle","contacts","Object","entries","onClick","className","style","Field","component","Input","name","placeholder","type","TextArea","map","title","index","s","UserContacts","ProfileData","isOwner","changeData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","src","photos","large","userPhoto","target","files","length","savePhoto","Preloader","message","likesCount","Form","_Component","_this","call","this","_reduxForm","Error","_inheritsLoose","_proto","prototype","componentDidMount","registerInnerOnSubmit","componentDidUpdate","prevProps","render","_this$props","rest","_objectWithoutPropertiesLoose","React","Component","propTypes","PropTypes","withReduxForm","maxLength10","maxLengthCreator","MyPosts","AddNewPostsReduxForm","addPost","newPostText","posts","reverse","p","validate","required","connect","state","profilePage","dispatch","newPost","addPostAC","ProfileContainer","userId","Number","match","params","autorazedUserId","history","push","ProfileGetTC","GetStatusTC","refreshProfile","prevState","snapshot","UpdateStatusTC","savePhotoTC","saveProfileTC","compose","auth","userID","isAuth","WithAuthRedirect","withRouter","mapStateToPropsForRedirect","restProps","to"],"sourceRoot":""}