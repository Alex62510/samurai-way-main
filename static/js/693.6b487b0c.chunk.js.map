{"version":3,"file":"static/js/693.6b487b0c.chunk.js","mappings":"oLACA,EAAyB,yBAAzB,EAA6D,2B,2DCqBvDA,EAAW,WACb,IAAMC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UACzDI,GAAWC,EAAAA,EAAAA,KAYjB,OATAC,EAAAA,EAAAA,YAAU,WAGN,OAFAF,GAASG,EAAAA,EAAAA,OAEF,WACHH,GAASI,EAAAA,EAAAA,UAEd,CAACJ,KAIA,2BACgB,UAAXJ,IAAsB,yDACvB,iCACI,SAACS,EAAD,KACA,SAACC,EAAD,WAMVD,EAAe,WACjB,IAAME,GAAoBC,EAAAA,EAAAA,QAAuB,MAC3CC,GAAWZ,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKU,YACjE,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAiBA,OAPAV,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdS,IACA,UAAAJ,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAG1D,CAACN,EAASE,KAGT,iBAAKK,UAAWC,EAAgBC,SAhBd,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7Ef,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWpC,UACKH,EAASkB,KAAI,SAACC,EAAGC,GAAJ,OAAc,SAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,QAC5C,gBAAKC,IAAK1B,QAIhBuB,EAA4CI,EAAAA,MAAW,YAAgB,IAAdH,EAAa,EAAbA,QAE3D,OACI,4BACI,SAAC,IAAD,CAAOI,IAAKJ,EAAQK,MAAOpB,UAAWC,EAAcoB,SAAS,KAC7D,uBAAIN,EAAQO,YACZ,kBACCP,EAAQA,SACT,wBAINzB,EAAqB,WACvB,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOqB,EAAP,KAAgBQ,EAAhB,KAEMvC,GAAWC,EAAAA,EAAAA,KACXL,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OACI,4BACI,0BACI,qBAAU4C,SAAU,SAACrB,GACjBoB,EAAWpB,EAAEE,cAAcoB,QAC5BA,MAAOV,OAEd,0BACI,SAAC,IAAD,CAAQW,SAAqB,UAAX9C,EAAoB+C,QAfvB,WAClBZ,IAGL/B,GAAS4C,EAAAA,EAAAA,IAAYb,IACrBQ,EAAW,MAUH,wBAOhB,EAnGqB,WACjB,OACI,0BACI,SAAC5C,EAAD","sources":["webpack://samurai-way/./src/pages/chat/chatPage.module.css?29a6","pages/chat/chatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"chatPage_avatar__1tL0z\",\"messages\":\"chatPage_messages__6C1lp\"};","import React, {FC, useEffect, useRef, useState,} from 'react';\nimport style from \"./chatPage.module.css\"\nimport {Button, Image} from \"antd\";\nimport {AppStateType, useAppDispatch} from \"../../redux/redux-store\";\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\nimport {useSelector} from \"react-redux\";\n\nexport type ChatMessageType = {\n\n    userId: number,\n    userName: string,\n    message: string,\n    photo: string\n}\n\nconst ChatPage: FC = () => {\n    return (\n        <div>\n            <Chat/>\n        </div>\n    );\n};\nconst Chat: FC = () => {\n    const status = useSelector((state: AppStateType) => state.chat.status)\n    const dispatch = useAppDispatch()\n\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [dispatch]);\n\n\n    return (\n        <div>\n            {status === \"error\" && <div>Error please refresh page </div>}\n            <>\n                <Messages/>\n                <AddMessageForm/>\n            </>\n\n        </div>\n    )\n}\nconst Messages: FC = () => {\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const element = e.currentTarget\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\n            !isAutoScroll && setIsAutoScroll(true)\n        } else {\n            isAutoScroll && setIsAutoScroll(false)\n        }\n    }\n    useEffect(() => {\n        if (isAutoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n        }\n\n    }, [messages,isAutoScroll]);\n\n    return (\n        <div className={style.messages} onScroll={scrollHandler}>\n            {messages.map((m, index) => <Message key={m.id} message={m}/>)}\n            <div ref={messagesAnchorRef}></div>\n        </div>\n    )\n}\nconst Message:FC<{ message: ChatMessageType }> =  React.memo(({message}) => {\n\n    return (\n        <div>\n            <Image src={message.photo} className={style.avatar} preview={false}/>\n            <b>{message.userName}</b>\n            <br/>\n            {message.message}\n            <hr/>\n        </div>\n    )\n})\nconst AddMessageForm: FC = () => {\n    const [message, setMessage] = useState('')\n\n    const dispatch = useAppDispatch()\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    const sendMessageHandler = () => {\n        if (!message) {\n            return\n        }\n        dispatch(sendMessage(message))\n        setMessage('')\n    }\n    return (\n        <div>\n            <div>\n                <textarea onChange={(e) => {\n                    setMessage(e.currentTarget.value)\n                }} value={message}></textarea>\n            </div>\n            <div>\n                <Button disabled={status !== \"ready\"} onClick={sendMessageHandler}>Send</Button>\n            </div>\n        </div>\n\n\n    )\n}\nexport default ChatPage;"],"names":["Chat","status","useSelector","state","chat","dispatch","useAppDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messagesAnchorRef","useRef","messages","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","className","style","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","src","photo","preview","userName","setMessage","onChange","value","disabled","onClick","sendMessage"],"sourceRoot":""}