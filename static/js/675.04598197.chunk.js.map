{"version":3,"file":"static/js/675.04598197.chunk.js","mappings":"4NACA,EAA0B,yB,UCA1B,EAAmC,sCAAnC,EAAuF,iCAAvF,EAAkI,6B,4BCqClI,EA/B+B,SAACA,GAC5B,OAAgCC,EAAAA,EAAAA,WAAkB,GAAlD,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAiBD,EAAMI,QAAnD,eAAOA,EAAP,KAAeC,EAAf,MAEJC,EAAAA,EAAAA,YAAU,WACND,EAAUL,EAAMI,UAClB,CAACJ,EAAMI,SAYL,OACI,yBACKF,GACG,0BACI,SAAC,IAAD,CAAOK,SARA,SAACC,GACpBH,EAAUG,EAAEC,cAAcC,QAOmBA,MAAON,EAAQO,WAAW,EAAMC,OAZtD,WACvBT,GAAY,GACZH,EAAMa,aAAaT,SAYT,0BACE,iBAAMU,cAlBG,WACrBX,GAAY,IAiBA,SAAwCH,EAAMI,QAAU,e,iDCd/DW,EAAoD,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,YAAad,EAAiB,EAAjBA,YAQrF,OACI,0BACI,SAACe,EAAD,CAAiBF,QAASA,EAASG,SAT1B,SAACC,GACdH,EAAYG,GAAUC,MAAK,WACvBlB,GAAY,MAEhBmB,QAAQC,IAAIH,IAK+CI,cAAeR,OAmD5EE,GAAkBO,EAAAA,EAAAA,GAAoB,CAACC,KAAM,eAA3BD,EAxCuC,SAAC,GAAoC,IAAnCE,EAAkC,EAAlCA,aAAcX,EAAoB,EAApBA,QAASY,EAAW,EAAXA,MAC9EC,EAAeb,EAAQc,UAAYC,OAAOC,QAAQhB,EAAQc,UAEhE,OACI,kBAAMX,SAAUQ,EAAhB,WACI,0BACI,mBAAQM,QAAS,WCxCR,IAACC,EAAYxB,EAAZwB,EDwC0B,YCxCdxB,EDwC0B,kBCvC5DyB,OAAOC,GAAG,SAASF,EAAKxB,IDuCZ,oBAIHkB,IAAS,gBAAKS,UAAWC,EAAAA,EAAAA,iBAAhB,SACLV,KAEL,4BACI,wCACA,SAACW,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAOC,KAAK,WAAWC,YAAY,iBAEzD,4BACI,gDACA,SAACJ,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAOC,KAAK,iBAAiBC,YAAY,WAAWT,KAAM,iBAEhF,4BACI,qDACA,SAACK,EAAA,EAAD,CAAOC,UAAWI,EAAAA,EAAUF,KAAK,4BAC1BC,YAAY,sCAEvB,4BACI,uCACA,SAACJ,EAAA,EAAD,CAAOC,UAAWI,EAAAA,EAAUF,KAAK,UAAUC,YAAY,gBAE3D,wCAAmB,0BACnB,8BAAId,QAAJ,IAAIA,OAAJ,EAAIA,EAAcgB,KAAI,SAACC,EAAOC,GAAR,OAAkB,4BACpC,gBAAKV,UAAWW,EAAhB,mBAA+BF,EAAM,GAArC,QACA,SAACP,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAOC,KAAM,YAAcI,EAAM,GAAIH,YAAaG,EAAM,OAF5BC,gBE9DjDE,EAAiC,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,SACtCD,EAAeC,GAAYC,OAAOC,QAAQF,GAChD,OAAO,gCACFD,QADE,IACFA,OADE,EACFA,EAAcgB,KAAI,SAACC,EAAOC,GAAR,OAAkB,0BACjC,gBAAKV,UAAWW,EAAhB,mBAAgCF,EAAM,GAAtC,aAA6CA,EAAM,GAAKA,EAAM,GAAI,OADvBC,S,oBC+CvD,IAAMG,EAAoC,SAAC,GAAoC,IAAnClC,EAAkC,EAAlCA,QAASmC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAC1D,OACI,2BACKD,IAAW,0BAAK,SAAC,IAAD,CAAQlB,QAASmB,EAAjB,yBACjB,4BACI,uCADJ,IACwBpC,EAAQqC,aAEhC,4BACI,+CAA2BrC,EAAQsC,eAAiB,MAAQ,SAEhE,4BACI,kDAA8BtC,EAAQuC,8BAE1C,4BACI,uCADJ,IACwBvC,EAAQwC,YAEhC,uCAdJ,KAcuB,SAACP,EAAD,CAAcnB,SAAUd,EAAQc,eAM/D,EA5DA,SAAqB9B,GACjB,OAAgCC,EAAAA,EAAAA,WAAkB,GAAlD,eAAOC,EAAP,KAAiBC,EAAjB,KAUA,OACI,yBAESH,EAAMgB,SAAyB,4BAC5B,0BACI,SAAC,IAAD,CAAOyC,SAAS,EACTC,IAAK,gFAEhB,iBAAKrB,UAAWW,EAAhB,WACI,SAAC,IAAD,CAAOS,SAAS,EAAOC,IAAK1D,EAAMgB,QAAQ2C,OAAOC,OAASC,EAAWxB,UAAWW,IAC/EhD,EAAMmD,UAAW,kBAAOjB,KAAM,OAAQ3B,SAfjC,SAACC,GACnBA,EAAEsD,OAAOC,OAASvD,EAAEsD,OAAOC,MAAMC,QACjChE,EAAMiE,UAAUzD,EAAEsD,OAAOC,MAAM,QAcnB,SAAC,EAAD,CAAwB3D,OAAQJ,EAAMI,OAAQS,aAAcb,EAAMa,eACjEX,GACG,SAACa,EAAD,CAAqBZ,YAAaA,EAAaa,QAAShB,EAAMgB,QACzCC,YAAajB,EAAMiB,eACxC,SAACiC,EAAD,CAAalC,QAAShB,EAAMgB,QAASmC,QAASnD,EAAMmD,QAASC,WAvBlE,WACfjD,GAAY,aAUa,SAAC+D,EAAA,EAAD,O,UCjCjC,EAA6B,4BAA7B,EAAiE,uBCAjE,EAAuB,mBCsBvB,EAda,SAAClE,GACV,OACI,iBAAKqC,UAAWW,EAAhB,WACI,SAAC,IAAD,CAAOmB,IAAI,GACPT,IAAI,wGACP1D,EAAMoE,SAEP,4BACI,oCAAmBpE,EAAMqE,kB,iDCXrCC,EAAoB,SAAUC,GAGhC,SAASD,EAAKtE,GACZ,IAAIwE,EAIJ,GAFAA,EAAQD,EAAWE,KAAKC,KAAM1E,IAAU0E,MAEnC1E,EAAM2E,WACT,MAAM,IAAIC,MAAM,8DAGlB,OAAOJ,GAXTK,EAAAA,EAAAA,GAAeP,EAAMC,GAcrB,IAAIO,EAASR,EAAKS,UAoBlB,OAlBAD,EAAOE,kBAAoB,WACzBN,KAAK1E,MAAM2E,WAAWM,sBAAsBP,KAAK1E,MAAMmB,WAGzD2D,EAAOI,mBAAqB,SAA4BC,GAClDT,KAAK1E,MAAMmB,WAAagE,EAAUhE,UACpCuD,KAAK1E,MAAM2E,WAAWM,sBAAsBP,KAAK1E,MAAMmB,WAI3D2D,EAAOM,OAAS,WACd,IAAIC,EAAcX,KAAK1E,MAEnBsF,GADaD,EAAYV,YAClBY,EAAAA,EAAAA,GAA8BF,EAAa,CAAC,gBAEvD,OAAoBG,EAAAA,cAAoB,OAAQF,IAG3ChB,EAnCe,CAoCtBmB,EAAAA,WAEFnB,EAAKoB,UAAY,CACfvE,SAAUwE,IAAAA,KAAAA,WACVhB,WAAYgB,IAAAA,QAEd,OAAeC,EAAAA,EAAAA,IAActB,G,UCpCvBuB,GAAcC,EAAAA,EAAAA,GAAiB,IAE/BC,EAAQP,EAAAA,MAAW,SAACxF,GAKtB,OACI,iBAAKqC,UAAWW,EAAhB,WACI,sCACA,SAACgD,EAAD,CAAsB7E,SANZ,SAACT,GACfV,EAAMiG,QAAQvF,EAAMwF,iBAMhB,gBAAK7D,UAAWW,EAAhB,UACK,OAAIhD,EAAMmG,OACNC,UACAvD,KAAI,SAACwD,EAAGtD,GAAJ,OAAc,SAAC,EAAD,CAAMqB,QAASiC,EAAEjC,QAASC,WAAYgC,EAAEhC,YACrBtB,cAmBpDiD,GAAuBvE,EAAAA,EAAAA,GAAU,CAACC,KAAM,0BAAjBD,EAbL,SAACzB,GACrB,OACI,UAAC,EAAD,CAAMmB,SAAUnB,EAAM2B,aAAtB,WACI,0BACI,SAACY,EAAA,EAAD,CAAOG,KAAK,cAAcF,UAAWI,EAAAA,EAAU0D,SAAU,CAACC,EAAAA,EAAUV,GAC7DlD,YAAY,oBAEvB,0BACI,iDAMhB,I,kBCrBA,GAF6B6D,EAAAA,EAAAA,KAbP,SAACC,GACnB,MAAO,CACHN,MAAOM,EAAMC,YAAYP,UAIR,SAACQ,GACtB,MAAO,CACHV,QAAS,SAACW,GACND,GAASE,EAAAA,EAAAA,IAAUD,QAIFJ,CAA6CT,G,UCnB7De,EAAmB,SAACL,GAC7B,OAAOA,EAAMC,YAAYtG,QC+B7B,EAlBgB,SAACJ,IAEE+G,EAAAA,EAAAA,KAAf,IACM3G,GAAO4G,EAAAA,EAAAA,IAAYF,GAEzB,OACI,iBAAKzE,UAAWW,EAAhB,WACI,SAAC,EAAD,CAAahC,QAAShB,EAAMgB,QACfZ,OAAQA,EACRS,aAAcb,EAAMa,aACpBoD,UAAWjE,EAAMiE,UACjBd,QAASnD,EAAMmD,QACflC,YAAajB,EAAMiB,eAEhC,SAAC,EAAD,Q,gCC4BNgG,GAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAkCD,OAlCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MACF,WACI,IAAIC,EAASC,OAAOzC,KAAK1E,MAAMoH,MAAMC,OAAOH,QACvCA,IACDA,EAAQC,OAAOzC,KAAK1E,MAAMsH,mBAEtB5C,KAAK1E,MAAMuH,QAAQC,KAAK,UAGhC9C,KAAK1E,MAAMyH,aAAaP,GACxBxC,KAAK1E,MAAM0H,YAAYR,KAC1B,+BACD,WACIxC,KAAKiD,mBACR,gCACD,SAAmBxC,EAAgDyC,EAAyBC,GACtFnD,KAAK1E,MAAMoH,MAAMC,OAAOH,SAAS/B,EAAUiC,MAAMC,OAAOH,QACvDxC,KAAKiD,mBAEX,oBACD,WACI,OACI,gBAAKtF,UAAWW,EAAhB,UACI,SAAC,GAAD,kBACQ0B,KAAK1E,OADb,IAEImD,SAAUuB,KAAK1E,MAAMoH,MAAMC,OAAOH,OAClClG,QAAS0D,KAAK1E,MAAMgB,QAEpBH,aAAc6D,KAAK1E,MAAM8H,eACzB7D,UAAWS,KAAK1E,MAAM+H,YACtB9G,YAAayD,KAAK1E,MAAMgI,uBAIvC,EAlCCf,CAAyBzB,EAAAA,WA6C/B,IAAeyC,EAAAA,GAAAA,KACXzB,EAAAA,EAAAA,KAVoB,SAACC,GAErB,MAAO,CACHzF,QAASyF,EAAMC,YAAY1F,QAC3BZ,OAAQqG,EAAMC,YAAYtG,OAC1BkH,gBAAiBb,EAAMyB,KAAKC,OAC5BC,OAAQ3B,EAAMyB,KAAKE,UAIE,CAACX,aAAAA,EAAAA,GAAcC,YAAAA,EAAAA,GAAaI,eAAAA,EAAAA,EAAeC,YAAAA,EAAAA,GAAYC,cAAAA,EAAAA,KAChFK,GAAAA,EACAC,EAAAA,GAHJ,CAGgBrB,K,iICpGVsB,EAA6B,SAAC9B,GAChC,MAAO,CACH2B,OAAQ3B,EAAMyB,KAAKE,SAGpB,SAASC,EAAqB5C,GAQjC,OADiCe,EAAAA,EAAAA,IAAQ+B,EAAR/B,EANP,SAACxG,GACvB,IAAIoI,EAAsBpI,EAAtBoI,OAAWI,GAAf,OAA0BxI,EAA1B,GACA,OAAKoI,GACE,SAAC3C,GAAD,UAAe+C,KADF,SAAC,KAAD,CAAUC,GAAI","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataEditForm.tsx","utils/metric/metric.ts","components/Profile/ProfileInfo/UserContacts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","../node_modules/redux-form/es/Form.js","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","redux/profile-selectors.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__-kSHn\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__e-soB\",\"avatarPhoto\":\"ProfileInfo_avatarPhoto__VkVjr\",\"contact\":\"ProfileInfo_contact__5DS+8\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Input} from \"antd\";\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => any\r\n}\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\nuseEffect(()=>{\r\n    setStatus(props.status)\r\n},[props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode ?\r\n                <div>\r\n                    <Input onChange={onStatusChange} value={status} autoFocus={true} onBlur={deactivateEditMode}/>\r\n                </div>\r\n                : <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n","import React, {FC} from \"react\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {sendMetrick} from \"../../../utils/metric/metric\";\r\n\r\ntype ProfileDataEditFormProps = {\r\n    profile: ProfileType\r\n    saveProfile: any\r\n    setEditMode: any\r\n}\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n\r\n}\r\n\r\nexport const ProfileDataEditForm: FC<ProfileDataEditFormProps> = ({profile, saveProfile, setEditMode}) => {\r\n    const onSubmit = (formData: any) => {\r\n        saveProfile(formData).then(()=>{\r\n            setEditMode(false)\r\n        })\r\n        console.log(formData)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileEditForm profile={profile} onSubmit={onSubmit} initialValues={profile}/>\r\n\r\n        </div>\r\n    )\r\n}\r\ntype HandleSubmitProps = {\r\n    handleSubmit: React.FormEventHandler<HTMLFormElement> | undefined\r\n    profile: ProfileType\r\n}\r\n\r\n\r\nconst ProfileEdit: FC<HandleSubmitProps & InjectedFormProps> = ({handleSubmit, profile, error}) => {\r\n    const contactTitle = profile.contacts && Object.entries(profile.contacts)\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button onClick={() => {sendMetrick('reachGoal','EditButtonClick')\r\n                }}>save\r\n                </button>\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name: </b>{\r\n                <Field component={Input} name=\"fullName\" placeholder=\"fullName\"/>}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>{\r\n                <Field component={Input} name=\"LookingForAJob\" placeholder=\"Look job\" type={'checkbox'}/>}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills: </b>{\r\n                <Field component={TextArea} name=\"lookingForAJobDescription\"\r\n                       placeholder=\"Looking for a job description\"/>}\r\n            </div>\r\n            <div>\r\n                <b>About me: </b>{\r\n                <Field component={TextArea} name=\"aboutMe\" placeholder=\"AboutMe\"/>}\r\n            </div>\r\n            <b> Contacts: </b>{<div>\r\n            <b>{contactTitle?.map((title, index) => <div key={index}>\r\n                <div className={s.contact}>{`${title[0]}:`}</div>\r\n                <Field component={Input} name={'contacts.' + title[0]} placeholder={title[0]}/>\r\n            </div>)}\r\n            </b>\r\n        </div>}\r\n        </form>\r\n    )\r\n}\r\nconst ProfileEditForm = reduxForm<any, any>({form: 'ProfileEdit'})(ProfileEdit)","declare global {\r\n    interface Window {\r\n        ym:any;\r\n    }\r\n}\r\nexport const sendMetrick=(type:string,value:string)=>{\r\n    window.ym(95208419,type,value)\r\n}","import {ContactsType} from \"../../../redux/profile-reducer\";\r\nimport React, {FC} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\ntype ContactProps = {\r\n    contacts?: ContactsType\r\n\r\n}\r\nexport const UserContacts: FC<ContactProps> = ({contacts }) => {\r\n    const contactTitle = contacts && Object.entries(contacts)\r\n    return <div>\r\n        {contactTitle?.map((title, index) => <div key={index}>\r\n            <div className={s.contact} >{`${title[0]}: ${title[1] ? title[1] :''}`}</div>\r\n        </div>)}\r\n    </div>\r\n}","import React, {ChangeEvent, FC, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/free-user.png\";\r\nimport {ProfileDataEditForm} from \"./ProfileDataEditForm\";\r\nimport {UserContacts} from \"./UserContacts\";\r\nimport {Button, Image} from \"antd\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => any\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    saveProfile: any\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const changeData = () => {\r\n        setEditMode(true)\r\n    }\r\n    const mainPhotoSelectOn = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                !props.profile ? <Preloader/> : <div>\r\n                    <div>\r\n                        <Image preview={false}\r\n                               src={\"https://cdn.pixabay.com/photo/2018/01/17/04/14/industry-3087393_1280.jpg\"}/>\r\n                    </div>\r\n                    <div className={s.descriptionBlock}>\r\n                        <Image preview={false} src={props.profile.photos.large || userPhoto} className={s.avatarPhoto}/>\r\n                        {props.isOwner && <input type={\"file\"} onChange={mainPhotoSelectOn}/>}\r\n                        <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                        {editMode ?\r\n                            <ProfileDataEditForm setEditMode={setEditMode} profile={props.profile}\r\n                                                 saveProfile={props.saveProfile}/> :\r\n                            <ProfileData profile={props.profile} isOwner={props.isOwner} changeData={changeData}/>}\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    changeData: () => void\r\n}\r\nconst ProfileData: FC<ProfileDataProps> = ({profile, isOwner, changeData}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><Button onClick={changeData}>EditData</Button></div>}\r\n            <div>\r\n                <b> Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>{profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div>\r\n                <b>Professionals skills: </b>{profile.lookingForAJobDescription}\r\n            </div>\r\n            <div>\r\n                <b> About me: </b> {profile.aboutMe}\r\n            </div>\r\n            <b> Contacts: </b> <UserContacts contacts={profile.contacts}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__fuhOX\",\"posts\":\"MyPosts_posts__qCqtz\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__EH7vn\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {Image} from \"antd\";\r\n\r\ntype PostPropsType={\r\n    message:string\r\n    likesCount:string\r\n}\r\n\r\nconst Post = (props:PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <Image alt=''\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcShwIXO7TuAocUZF1Jq5mJuRs78wGsf3Qe5-w&usqp=CAU\"/>\r\n            {props.message}\r\n\r\n            <div>\r\n                <span>likes</span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withReduxForm } from './ReduxFormContext';\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    if (!props._reduxForm) {\n      throw new Error('Form must be inside a component decorated with reduxForm()');\n    }\n\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onSubmit !== prevProps.onSubmit) {\n      this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _reduxForm = _this$props._reduxForm,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"_reduxForm\"]);\n\n    return /*#__PURE__*/React.createElement(\"form\", rest);\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  _reduxForm: PropTypes.object\n};\nexport default withReduxForm(Form);","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {Field, Form, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPost: string) => void\r\n}\r\nconst maxLength10 = maxLengthCreator(20)\r\n\r\nconst MyPosts=React.memo((props: MyPostsPropsType)=> {\r\n\r\n    const onAddPost = (value: string | any) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostsReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {[...props.posts]\r\n                    .reverse()\r\n                    .map((p, index) => <Post message={p.message} likesCount={p.likesCount}\r\n                                                     key={index}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddNewPostsForm = (props: any) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" component={TextArea} validate={[required, maxLength10]}\r\n                       placeholder=\"post massage\"/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\nconst AddNewPostsReduxForm = reduxForm({form: \"ProfileAddNewPostsForm\"})(AddNewPostsForm)\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"../MyPosts\";\r\nimport {addPostAC, PostType} from \"../../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    // newPostText: string\r\n}\r\nlet MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet MapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPost:string) => {\r\n            dispatch(addPostAC(newPost))\r\n        }\r\n    }\r\n}\r\nconst SuperMyPostContainer = connect(MapStateToProps, MapDispatchToProps)(MyPosts)\r\n\r\nexport default SuperMyPostContainer;","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getProfilePage = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n}\r\nexport const getProfileStatus = (state: AppStateType) => {\r\n    return state.profilePage.status\r\n}\r\nexport const getUserId = (state: AppStateType) => {\r\n    return state.auth.userID\r\n}\r\nexport const getAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport SuperMyPostContainer from \"./MyPosts/Post/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {useAppDispatch} from \"../../redux/redux-store\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getProfileStatus} from \"../../redux/profile-selectors\";\r\n\r\n\r\nexport type ProfilepropsType = {\r\n    profile: ProfileType | null\r\n    // status: string\r\n    updateStatus: (status: string) => any\r\n    isOwner: boolean\r\n    savePhoto:(file:any)=>any\r\n    saveProfile:any\r\n}\r\n\r\nconst Profile = (props: ProfilepropsType) => {\r\n\r\n    const dispatch=useAppDispatch()\r\n    const status=useSelector(getProfileStatus)\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <SuperMyPostContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    GetStatusTC,\r\n    ProfileGetTC,\r\n    ProfileType,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    UpdateStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    autorazedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    ProfileGetTC: (id: number) => any\r\n    GetStatusTC: (id: number) => any\r\n    UpdateStatusTC: (status: string) => any\r\n    savePhotoTC:(file:any)=>any\r\n    saveProfileTC:(value:any)=>any\r\n}\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype PropsType={}\r\n// const ProfilePage:FC<PropsType>=(props)=>{\r\n//\r\n//\r\n//     return (\r\n//         <div className={s.content}>\r\n//             <Profile\r\n//                 {...this.props}\r\n//                 isOwner={!this.props.match.params.userId}\r\n//                 profile={this.props.profile}\r\n//                 // status={this.props.status}\r\n//                 updateStatus={this.props.UpdateStatusTC}\r\n//                 savePhoto={this.props.savePhotoTC}\r\n//                 saveProfile={this.props.saveProfileTC}\r\n//             />\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n    refreshProfile(){\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId =Number(this.props.autorazedUserId)\r\n            if(!userId){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.ProfileGetTC(userId)\r\n        this.props.GetStatusTC(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n       if(this.props.match.params.userId!==prevProps.match.params.userId){\r\n           this.refreshProfile()\r\n       }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={s.content}>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    // status={this.props.status}\r\n                    updateStatus={this.props.UpdateStatusTC}\r\n                    savePhoto={this.props.savePhotoTC}\r\n                    saveProfile={this.props.saveProfileTC}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorazedUserId: state.auth.userID,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {ProfileGetTC, GetStatusTC, UpdateStatusTC,savePhotoTC,saveProfileTC}),\r\n    WithAuthRedirect,\r\n    withRouter)(ProfileContainer)\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nexport type MapStateToPropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsTypeForRedirect => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport function WithAuthRedirect <T>(Component: ComponentType<T>)  {\r\n    const RedirectComponent = (props: MapStateToPropsTypeForRedirect) => {\r\n        let{isAuth, ...restProps}=props\r\n        if (!isAuth) return <Redirect to={'/Login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileDataEditForm","profile","saveProfile","ProfileEditForm","onSubmit","formData","then","console","log","initialValues","reduxForm","form","handleSubmit","error","contactTitle","contacts","Object","entries","onClick","type","window","ym","className","style","Field","component","Input","name","placeholder","TextArea","map","title","index","s","UserContacts","ProfileData","isOwner","changeData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","preview","src","photos","large","userPhoto","target","files","length","savePhoto","Preloader","alt","message","likesCount","Form","_Component","_this","call","this","_reduxForm","Error","_inheritsLoose","_proto","prototype","componentDidMount","registerInnerOnSubmit","componentDidUpdate","prevProps","render","_this$props","rest","_objectWithoutPropertiesLoose","React","Component","propTypes","PropTypes","withReduxForm","maxLength10","maxLengthCreator","MyPosts","AddNewPostsReduxForm","addPost","newPostText","posts","reverse","p","validate","required","connect","state","profilePage","dispatch","newPost","addPostAC","getProfileStatus","useAppDispatch","useSelector","ProfileContainer","userId","Number","match","params","autorazedUserId","history","push","ProfileGetTC","GetStatusTC","refreshProfile","prevState","snapshot","UpdateStatusTC","savePhotoTC","saveProfileTC","compose","auth","userID","isAuth","WithAuthRedirect","withRouter","mapStateToPropsForRedirect","restProps","to"],"sourceRoot":""}